import React, { useState } from "react";
import { Col, Button } from "react-bootstrap";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import css from "./BuyForm.module.css";
import style from "./Product.module.css";
import Modal from "../Modal/Modal";

const validationSchema = Yup.object().shape({
  name: Yup.string()
    .min(3, "–Ü–º'—è –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤")
    .max(32, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 50 —Å–∏–º–≤–æ–ª–∏")
    .matches(
      /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ“ë“ê\s]+$/,
      "–Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏"
    )
    .required("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"),

  phone: Yup.string()
    .matches(/^\d{10}$/, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    .required("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"),

  address: Yup.string()
    .max(100, "–ê–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–æ—é –∑–∞ 200 —Å–∏–º–≤–æ–ª—ñ–≤")
    .required("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"),

  comment: Yup.string().max(
    500,
    "–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 500 —Å–∏–º–≤–æ–ª—ñ–≤"
  ),
});

const BuyForm = ({ product, orderModal }) => {
  const [orderResult, setOrderResult] = useState("");
  const [modalResult, setModalResult] = useState(false);

  const handleSubmit = async (values, { resetForm }) => {
    const { title, price } = product;
    const newOrder = { ...values, title, price };
    console.log(newOrder);

    const message = `
      üõí –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:!
      üì¶ –ü—Ä–æ–¥—É–∫—Ç: ${title}
      üíµ –¶—ñ–Ω–∞: ${price} –≥—Ä–Ω.
      üë§ –Ü–º'—è: ${values.name}
      üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${values.phone}
      üìç –ê–¥—Ä–µ—Å–∞: ${values.address}
      üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${values.comment || "–ù–µ–º–∞—î"}
    `;

    try {
      const response = await fetch(
        "https://sparkling-treacle-fe54b9.netlify.app/.netlify/functions/sendMessage",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: "5141047645",
            text: message,
            parse_mode: "HTML",
          }),
        }
      );

      await response.json();

      if (response.ok) {
        setOrderResult("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!");
        setModalResult(true);
      } else {
        setOrderResult("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
        setModalResult(true);
      }
    } catch (error) {
      setOrderResult("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
      setModalResult(true);
    }

    orderModal(false);
    resetForm();
    setTimeout(() => {
      setModalResult(false);
    }, 2000);
  };

  return (
    <Formik
      initialValues={{
        name: "",
        phone: "",
        address: "",
        comment: "",
      }}
      validationSchema={validationSchema}
      onSubmit={handleSubmit}
    >
      <Col className="ps-1 pe-1">
        <Form className={`pb-1 px-4 ${css.form}`} autoComplete="off">
          <label className={css.label} htmlFor="name">
            –í–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
            <Field type="text" name="name" id="name" />
            <ErrorMessage name="name" component="div" className="text-danger" />
          </label>
          <label className={css.label} htmlFor="phone">
            –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            <Field
              type="text"
              name="phone"
              id="phone"
              placeholder="0934057570"
            />
            <ErrorMessage
              name="phone"
              component="div"
              className="text-danger"
            />
          </label>
          <label className={css.label} htmlFor="address">
            –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
            <Field type="text" name="address" id="address" />
            <ErrorMessage
              name="address"
              component="div"
              className="text-danger"
            />
          </label>
          <Col>
            <p>
              <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
              <br />"{product.title}" –Ω–∞ —Å—É–º—É {product.price}–≥—Ä–Ω.
            </p>
          </Col>
          <label className={css.label} htmlFor="comment">
            –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–π –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            <Field as="textarea" type="text" name="comment" id="comment" />
            <ErrorMessage
              name="comment"
              component="div"
              className="text-danger"
            />
          </label>
          <Col className="d-flex justify-content-evenly mt-4">
            <Button className={style.buyBtn} type="submit">
              –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </Button>
          </Col>
        </Form>
        {modalResult && (
          <Modal
            show={modalResult}
            onClose={() => setModalResult(false)}
            style={{ height: "auto" }}
          >
            <b>{orderResult}</b>
          </Modal>
        )}
      </Col>
    </Formik>
  );
};

export default BuyForm;
